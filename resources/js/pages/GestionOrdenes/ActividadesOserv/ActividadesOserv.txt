import React, { useEffect, useState } from "react";
import MaterialTable from "material-table";
import { Modal, TextField, Button, Select, MenuItem, FormControl, InputLabel, Typography, Grid, InputAdornment } from "@material-ui/core";
import { ButtonGroup } from "@material-ui/core";
import { makeStyles } from "@material-ui/core/styles";
import { green, purple, blueGrey } from '@material-ui/core/colors';
import NumberFormat from 'react-number-format';
import swal from 'sweetalert';
import AttachMoneyIcon from '@material-ui/icons/AttachMoney';
import Moment from 'moment';

// Componentes de Conexion con el Backend
import inventariosServices from "../../../services/Almacenes/Inventarios";
import crearordenesServices from "../../../services/GestionOrdenes/CrearOrdenes";
import cumplimientooservServices from "../../../services/GestionOrdenes/CumplimientoOserv";
import tipooperacionServices from "../../../services/GestionOrdenes/TipoOperacion";

const useStyles = makeStyles((theme) => ({
  modal: {
    position: 'absolute',
    width: 800,
    backgroundColor: theme.palette.background.paper,
    border: '2px solid #000',
    boxShadow: theme.shadows[5],
    padding: theme.spacing(2, 4, 3),
    top: '50%',
    left: '50%',
    transform: 'translate(-50%, -50%)'
  },
  iconos: {
    cursor: 'pointer'
  },
  inputMaterial: {
    width: '100%'
  },
  formControl: {
    margin: theme.spacing(0),
    minWidth: 515,
    maxWidth: 515,
  },
  formControl2: {
    margin: theme.spacing(0),
    minWidth: 220,
    maxWidth: 220,
  },
  typography: {
    fontSize: 13,
    color: "#ff3d00"
  },
  button: {
    color: theme.palette.getContrastText(blueGrey[200]),
    margin: theme.spacing(1),
    '&:hover': {
      backgroundColor: blueGrey[200],
    },
  },
  button2: {
    color: theme.palette.getContrastText(blueGrey[200]),
    margin: theme.spacing(0),
    '&:hover': {
      backgroundColor: blueGrey[200],
    },
  }
}));

function NumberFormatCustom(props) {
  const { inputRef, ...other } = props;
  //console.log(inputRef);
  return (
    <NumberFormat
      {...other}
      getInputRef={inputRef}
      thousandSeparator={','}
      decimalSeparator={'.'}
    />
  );
}

function ActividadesOserv(props) {
  const { id_otr, nombre_emp, razonsocial_cli, telefono_cli, nombre_ciu, email_cli, descripcion_mar, modelo_dequ,
    fechainicia_otr, descripcion_tser, descripcion_tmt, serie_dequ, codigo_equ, descripcion_con } = props.ordenSeleccionado;

  const styles = useStyles();
  const [listarUnaOrden, setListarUnaOrden] = useState([]);
  const [listInventarios, setListInventarios] = useState([]);
  const [listarCumplimientoOrden, setListarCumplimientoOrden] = useState([]);
  const [modalInsertar, setModalInsertar] = useState(false);
  const [modalCumplimiento, setModalCumplimiento] = useState(false);
  const [modalCerrarOrden, setModalCerrarOrden] = useState(false);
  const [modalRevisarCumplimiento, setModalRevisarCumplimiento] = useState(false);
  const [formError, setFormError] = useState(false);
  const [listarAlmacenes, setListarAlmacenes] = useState([]);
  const [listarTipoOperacion, setListarTipoOperacion] = useState([]);
  const [listarTiposProductos, setListarTiposProductos] = useState([]);
  const [listarEstados, setListarEstados] = useState([]);

  const [inventariosSeleccionado, setInventariosSeleccionado] = useState([]);

  const [cumplimientoSeleccionado, setCumplimientoSeleccionado] = useState({
    id_cosv: "",
	  descripcion_cosv: "",
	  tipooperacion_cosv: "",
	  referencia_cosv: "",
	  fechainicia_cosv: "",
	  fechafinal_cosv: "",
	  horainiciacosv: "",
	  horafinal_cosv: "",
	  cantidad_cosv: "",
	  valorunitario_cosv: "",
	  valortotal_cosv: "",
	  servicio_cosv: "",
	  observacion_cosv: ""
  });

  useEffect(() => {
    async function fetchDataInventarios() {
      const res = await inventariosServices.listInventarios();
      setListInventarios(res.data);
    }
    fetchDataInventarios();
  }, [])

  useEffect(() => {
    async function fetchDataTipoOperacion() {
      const res = await tipooperacionServices.listTipooperacion();
      setListarTipoOperacion(res.data);
    }
    fetchDataTipoOperacion();
  }, [])

  const valorTotal = (cantidad) => {
    //console.log("CANTIDAD : ", cantidad)
  }

  const handleChange = e => {
    const { name, value } = e.target;

    setCumplimientoSeleccionado(prevState => ({
      ...prevState,
      [name]: value
    }));
  }

  const seleccionarInventarios = (inventarios, caso) => {
    setInventariosSeleccionado(inventarios);
    
    {
      listInventarios.map((elementos) => (

        console.log("INVENTARIO SELECCIONADO : ",elementos.id_inv)
      ))
  }
    (caso === "Editar") ? abrirCerrarModalCumplimiento() : abrirCerrarModalInsertar()
  }

  const abrirCerrarModalInsertar = () => {
    setModalInsertar(!modalInsertar);
  }

  const abrirCerrarModalCumplimiento = () => {
    setModalCumplimiento(!modalCumplimiento);
  }

  const abrirCerrarModalRevisarCumplimiento = () => {
    setModalRevisarCumplimiento(!modalRevisarCumplimiento);
  }

  const abrirCerrarModalCerrarOrden = () => {
    setModalCerrarOrden(!modalCerrarOrden);
  }

  const actualizarCumplimiento = async () => {

    setFormError({});
    let errors = {};
    let formOk = true;

    alert("ENTRE");
    console.log(cumplimientoSeleccionado);

    /*
    if (!lineasProductosSeleccionado.descripcion_tprd) {
      errors.descripcion_tprd = true;
      formOk = false;
    }

    if (!lineasProductosSeleccionado.empresa_tprd) {
      errors.empresa_tprd = true;
      formOk = false;
    }

    if (!lineasProductosSeleccionado.estado_tprd) {
      errors.estado_tprd = true;
      formOk = false;
    }
    setFormError(errors);

    if (formOk) {

      const res = await lineasproductosServices.update(lineasProductosSeleccionado);

      if (res.success) {
        swal("Linea de Producto", "Actualizado de forma Correcta!", "success", { button: "Aceptar" });
        console.log(res.message)
        abrirCerrarModalEditar();
        delete lineasProductosSeleccionado.descripcion_tprd;
        delete lineasProductosSeleccionado.empresa_tprd;
        delete lineasProductosSeleccionado.estado_tprd;
      } else {
        swal("Linea de Producto", "Error Actualizando Linea de Producto!", "error", { button: "Aceptar" });
        console.log(res.message);
        abrirCerrarModalEditar();
      }
    }
    else {
      swal("Linea de Producto", "Debe Ingresar Todos los Datos, Revisar Informaci贸n!", "warning", { button: "Aceptar" });
      console.log(res.message);
      abrirCerrarModalEditar();
    }
    */
  }

  // "string","boolean","numeric","date","datetime","time","currency"

  const columnas = [

    {
      title: 'Descripci贸n',
      field: 'descripcion_inv',
      cellStyle: { minWidth: 250 }
    },
    {
      title: 'Referencia',
      field: 'referencia_inv'
    },
    {
      title: 'Tipo Producto',
      field: 'descripcion_tprd',
      cellStyle: { minWidth: 100 }
    },
    {
      title: 'Fecha Actualizacion',
      field: 'fechaactualizacion_inv',
      type: 'date'
    },
    {
      title: 'Hora Actualizaci贸n',
      field: 'horaactualizacion_inv',
      type: 'time'
    },
    {
      title: 'Existencias',
      field: 'existencia_inv',
      cellStyle: { minWidth: 50 }
    },
    {
      title: 'Estado',
      field: 'nombre_est',
      cellStyle: { minWidth: 50 }
    }
  ]

  const cumplimiento = [

    {
      title: 'Descripci贸n',
      field: 'descripcion_inv',
      cellStyle: { minWidth: 250 }
    }
  
  ]

  const CumplimientoOrden = (
    <div className="App" >
      <div className={styles.modal}>
        <Typography align="center" className={styles.typography} variant="button" display="block" >
          Registrar Actividad a la Orden de Servicio
        </Typography>
        <br />
        <Grid container spacing={2} >
          <Grid item xs={12} md={2}> <TextField name="id_cosv" label="# Orden de Servicio" disabled="true"
            defaultValue={id_otr}
            fullWidth onChange={handleChange} value={cumplimientoSeleccionado && id_otr} />
          </Grid>
          <Grid item xs={12} md={4}>
            <FormControl className={styles.formControl2}>
              <InputLabel id="idselecttipooperacion_cosv">Tipo</InputLabel>
              <Select
                disabled="true"
                labelId="selecttipooperacion_cosv"
                name="tipooperacion_cosv"
                id="idselecttipooperacion_cosv"
                fullWidth onChange={handleChange}
                defaultValue={inventariosSeleccionado.tipooperacion_inv}
                value={cumplimientoSeleccionado && cumplimientoSeleccionado.tipooperacion_inv}
              >
                <MenuItem value=""> <em>None</em> </MenuItem>
                {
                  listarTipoOperacion.map((itemselect) => {
                    return (
                      <MenuItem value={itemselect.id_tope}>{itemselect.descripcion_tope}</MenuItem>
                    )
                  })
                }
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} md={6}> <TextField name="id_descripcion_cosv" label="Concepto" disabled="true"
            defaultValue={descripcion_con}
            fullWidth onChange={handleChange} value={inventariosSeleccionado && inventariosSeleccionado.descripcion_cosv} />
          </Grid>
          <Grid item xs={12} md={8}> <TextField name="referencia_cosv" label="Actividad Realizada" disabled="true"
            defaultValue={inventariosSeleccionado.descripcion_inv}
            fullWidth onChange={handleChange} value={inventariosSeleccionado && inventariosSeleccionado.referencia_cosv} />
          </Grid>
          <Grid item xs={12} md={4}>
            <FormControl className={styles.formControl2}>
              <InputLabel id="servicio_cosv">Servicio Realizado</InputLabel>
              <Select
                labelId="selectservicio_cosv"
                name="servicio_cosv"
                id="idselectservicio_cosv"
                onChange={handleChange}
              >
                <MenuItem value="1"> Cambiado </MenuItem>
                <MenuItem value="2"> Revisado </MenuItem>
                <MenuItem value="3"> Limpiar </MenuItem>
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} md={3}> <TextField type="date" InputLabelProps={{ shrink: true }} name="fechainicia_cosv"
            defaultValue={Moment(inventariosSeleccionado.fechaactual).format('YYYY-MM-DD')}
            label="Fecha Inicia Actividad" fullWidth onChange={handleChange} />
          </Grid>
          <Grid item xs={12} md={3}> <TextField type="date" InputLabelProps={{ shrink: true }} name="fechafinal_cosv"
            defaultValue={Moment(inventariosSeleccionado.fechaactual).format('YYYY-MM-DD')}
            label="Fecha Finaliza Actividad" fullWidth onChange={handleChange} />
          </Grid>
          <Grid item xs={12} md={3}> <TextField type="time" InputLabelProps={{ shrink: true }} name="horainiciacosv"
            label="Hora Inicia Actividad" fullWidth onChange={handleChange}
            defaultValue={Moment(inventariosSeleccionado.horaactual).format('HH:mm:ss')}
            value={inventariosSeleccionado && inventariosSeleccionado.horainiciacosv} />
          </Grid>
          <Grid item xs={12} md={3}> <TextField type="time" InputLabelProps={{ shrink: true }} name="horafinal_cosv"
            label="Hora Final Actividad" fullWidth onChange={handleChange}  
            defaultValue={Moment(inventariosSeleccionado.horaactual).format('HH:mm:ss')}
            value={inventariosSeleccionado && inventariosSeleccionado.horafinal_cosv} />
          </Grid>
          <Grid item xs={12} md={4}>
            <TextField name="cantidad_cosv" label="Cantidad" InputLabelProps={{ shrink: true }}
              InputProps={{
                inputComponent: NumberFormatCustom,
                startAdornment: (
                  <InputAdornment position="start">
                  </InputAdornment>
                ),
              }}
              fullWidth onChange={handleChange}
              value={inventariosSeleccionado && inventariosSeleccionado.cantidad_cosv} />
          </Grid>
          <Grid item xs={12} md={4}>
            <TextField name="valorunitario_cosv" label="Valor Unitario" InputLabelProps={{ shrink: true }}
              InputProps={{
                inputComponent: NumberFormatCustom,
                startAdornment: (
                  <InputAdornment position="start">
                    < AttachMoneyIcon />
                  </InputAdornment>
                ),
              }}
              fullWidth onChange={handleChange}
              defaultValue={inventariosSeleccionado.costounitponderado_inv}
              onClick={() => valorTotal(inventariosSeleccionado.cantidad_cosv)}
              value={inventariosSeleccionado && inventariosSeleccionado.valorunitario_cosv} />
          </Grid>
          <Grid item xs={12} md={4}>
            <TextField name="valortotal_cosv" label="Valor Total" InputLabelProps={{ shrink: true }}
              InputProps={{
                inputComponent: NumberFormatCustom,
                startAdornment: (
                  <InputAdornment position="start">
                    < AttachMoneyIcon />
                  </InputAdornment>
                ),
              }}
              fullWidth onChange={handleChange}
              defaultValue={inventariosSeleccionado.costototalponderado_inv}
              value={inventariosSeleccionado && inventariosSeleccionado.valortotal_cosv} />
          </Grid>
          <Grid item xs={12} md={12}>
            <TextField className={styles.inputMaterial} label="Observaciones o Comentarios" name="observacion_cosv"
              onChange={handleChange} value={inventariosSeleccionado && inventariosSeleccionado.observacion_cosv} />
          </Grid>
        </Grid>
        <br />
        <div align="right">
          <Button color="primary" onClick={() => actualizarCumplimiento()} >Guardar</Button>
          <Button onClick={() => abrirCerrarModalCumplimiento()}>Cancelar</Button>
        </div>
      </div>
    </div>
  )

  const RevisarCumplimiento = (
    <MaterialTable
        columns={cumplimiento}
        data={listInventarios}
        title="SELECCIONAR INSUMO O ACTIVIDAD"
        actions={[
          {
            icon: 'edit',
            tooltip: 'Editar Item',
            onClick: (event, rowData) => seleccionarInventarios(rowData, "Editar")
          }
        ]}
        options={{
          actionsColumnIndex: -1
        }}
        localization={{
          header: {
            actions: "Acciones"
          }
        }}
      />
  )

  const CerrarOrden = (
    <div className={styles.modal}>
      <p>Est谩s seguro que desea Cerrar la Orden de Servicio <b> {id_otr} </b>? </p>
      <div align="right">
        <Button color="secondary"> Confirmar </Button>
        <Button onClick={() => abrirCerrarModalCerrarOrden()}> Cancelar </Button>
      </div>
    </div>
  )
  // onClick={() => borrarLineaProducto()}

  // <Button variant="contained" startIcon={<CachedIcon />} color="primary" onClick={() => leerOrdenes()} >Todas las Ordenes</Button>
  return (
    <div className="App">
      <br />
      <Typography align="center" className={styles.typography} variant="button" display="block" >
        ORDEN DE SERVICIO # {props.ordenSeleccionado.id_otr}
      </Typography>
      <ButtonGroup orientation="vertical" className={styles.button} color="primary" aria-label="outlined primary button group">
        <Button>EMPRESA : {nombre_emp} </Button>
        <Button>CLIENTE : {razonsocial_cli} </Button>
        <Button>TELEFONO : {telefono_cli} </Button>
      </ButtonGroup>
      <ButtonGroup orientation="vertical" className={styles.button} color="primary" aria-label="outlined primary button group">
        <Button >CONTACTO : XXXXXXXXXXXXXXXXXXXXXXXXXX </Button>
        <Button >CIUDAD : {nombre_ciu} </Button>
        <Button >CORREO : {email_cli} </Button>
      </ButtonGroup>
      <ButtonGroup orientation="vertical" className={styles.button} color="primary" aria-label="outlined primary button group">
        <Button >MARCA : {descripcion_mar} </Button>
        <Button >MODELO : {modelo_dequ} </Button>
        <Button >FECHA : {fechainicia_otr} </Button>
      </ButtonGroup>
      <ButtonGroup className={styles.button2} color="primary" aria-label="outlined primary button group">
        <Button >TIPO DE SERVICIO : {descripcion_tser} </Button>
        <Button >TIPO DE ACTIVIDAD : {descripcion_tmt}  </Button>
      </ButtonGroup>
      <ButtonGroup className={styles.button2} color="primary" aria-label="outlined primary button group">
        <Button >SERIE : {serie_dequ}  </Button>
        <Button >ID INTERNO : {codigo_equ}  </Button>
        <Button >HOROMETRO : XX </Button>
      </ButtonGroup>
      <ButtonGroup className={styles.button} color="primary" aria-label="outlined primary button group">
        <Button onClick={() => abrirCerrarModalRevisarCumplimiento()} >Revisar Cumplimiento </Button>
        <Button onClick={() => abrirCerrarModalCerrarOrden()} >Cerrar Orden </Button>
      </ButtonGroup>
      <Typography align="center" className={styles.typography} variant="button" display="block" >
        Dar Click sobre el Item que quieres agregar al Cumplimiento de la Orden de Servicio
      </Typography>

      <MaterialTable
        columns={columnas}
        data={listInventarios}
        title="SELECCIONAR INSUMO O ACTIVIDAD"
        actions={[
          {
            icon: 'edit',
            tooltip: 'Editar Item',
            onClick: (event, rowData) => seleccionarInventarios(rowData, "Editar")
          }
        ]}
        options={{
          actionsColumnIndex: -1
        }}
        localization={{
          header: {
            actions: "Acciones"
          }
        }}
      />{ }

      <Modal
        open={modalCumplimiento}
        onClose={abrirCerrarModalCumplimiento}
      >
        {CumplimientoOrden}
      </Modal>

      <Modal
        open={modalRevisarCumplimiento}
        onClose={abrirCerrarModalRevisarCumplimiento}
      >
        {RevisarCumplimiento}
      </Modal>

      <Modal
        open={modalCerrarOrden}
        onClose={abrirCerrarModalCerrarOrden}
      >
        {CerrarOrden}
      </Modal>

    </div>
  );
}

export default ActividadesOserv;

